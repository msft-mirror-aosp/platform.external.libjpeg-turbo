load("@bazel_skylib//lib:selects.bzl", "selects")
load("@rules_license//rules:license.bzl", "license")
load("@rules_license//rules:license_kind.bzl", "license_kind")
load("bazel/ljtmacros.bzl", "asm_library")

package(
    default_applicable_licenses = [":license"],
    default_visibility = ["//visibility:public"],
)

license(
    name = "license",
    license_kinds = [
        ":Beerware",
        ":SPDX-license-identifier-BSD",
        ":SPDX-license-identifier-MIT",
    ],
    visibility = [":__subpackages__"],
)

# Beerware License
license_kind(
    name = "Beerware",
    conditions = [],
    url = "https://spdx.org/licenses/Beerware",
)

license_kind(
    name = "SPDX-license-identifier-Apache-2.0",
    conditions = ["notice"],
    url = "https://spdx.org/licenses/Apache-2.0.html",
)

license_kind(
    name = "SPDX-license-identifier-MIT",
    conditions = ["notice"],
    url = "https://spdx.org/licenses/MIT.html",
)

license_kind(
    name = "SPDX-license-identifier-BSD",
    conditions = ["notice"],
    url = "https://spdx.org/licenses/BSD-3-Clause.html",
)

# --------------------------------------------------------------------------
# Define copts based on the OS and CPU.

libjpegturbo_copts_common = [
    "-O3",
    "-w",
]

libjpegturbo_copts_windows = []

libjpegturbo_copts_android = []

libjpegturbo_copts_neon_base = [
    "-D__ARM_NEON__",
    "-DNEON_INTRINSICS",
    "-march=armv7-a",
    "-mfpu=neon",
    "-fprefetch-loop-arrays",
]

libjpegturbo_copts_neon = [
    "-mfloat-abi=softfp",
] + libjpegturbo_copts_neon_base

libjpegturbo_copts_neon_hard_fp = [
    "-mfloat-abi=hard",
] + libjpegturbo_copts_neon_base

libjpegturbo_copts_arm64 = [
    "-DNEON_INTRINSICS",
]

libjpegturbo_copts_x86 = []

libjpegturbo_copts_x86_64 = []

config_setting(
    name = "android_aarch64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:android",
    ],
)

config_setting(
    name = "android_armv7",
    constraint_values = [
        "@platforms//cpu:armv7",
        "@platforms//os:android",
    ],
)

config_setting(
    name = "android_x86_32",
    constraint_values = [
        "@platforms//cpu:x86_32",
        "@platforms//os:android",
    ],
)

config_setting(
    name = "android_x86_64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:android",
    ],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "windows_x86_32",
    constraint_values = [
        "@platforms//cpu:x86_32",
        "@platforms//os:windows",
    ],
)

config_setting(
    name = "osx_apple",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:aarch64",
    ],
)

config_setting(
    name = "osx_intel",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "windows_x86_64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
)

selects.config_setting_group(
    name = "aarch64",
    match_any = [
        ":android_aarch64",
        ":linux_aarch64",
        ":osx_apple",
    ],
)

selects.config_setting_group(
    name = "aarch32",
    match_any = [
        ":android_armv7",
    ],
)

selects.config_setting_group(
    name = "x86_32",
    match_any = [
        ":android_x86_32",
        ":windows_x86_32",
    ],
)

selects.config_setting_group(
    name = "x86_64",
    match_any = [
        ":android_x86_64",
        ":linux_x86_64",
        ":windows_x86_64",
        ":osx_intel",
    ],
)

libjpegturbo_copts = libjpegturbo_copts_common + select({
    "@platforms//os:android": libjpegturbo_copts_android,
    "@platforms//os:windows": libjpegturbo_copts_windows,
    "//conditions:default": [],
}) + select({
    ":android_armv7": libjpegturbo_copts_neon,
    ":aarch64": libjpegturbo_copts_arm64,
    ":x86_32": libjpegturbo_copts_x86,
    ":x86_64": libjpegturbo_copts_x86_64,
    "//conditions:default": [],
})

# --------------------------------------------------------------------------
# Define linkopts based on the OS and CPU.

libjpegturbo_linkopts_android = [
    "-pie",
]

libjpegturbo_linkopts = select({
    "@platforms//os:android": libjpegturbo_linkopts_android,
    "//conditions:default": [],
})

# --------------------------------------------------------------------------
# Libraries

cc_library(
    name = "jpeg",
    srcs = [
        "jaricom.c",
        "jcapimin.c",
        "jcapistd.c",
        "jcarith.c",
        "jccoefct.c",
        "jccolor.c",
        "jcdctmgr.c",
        "jchuff.c",
        "jchuff.h",
        "jcicc.c",
        "jcinit.c",
        "jcmainct.c",
        "jcmarker.c",
        "jcmaster.c",
        "jcomapi.c",
        "jconfig.h",
        "jconfigint.h",
        "jcparam.c",
        "jcphuff.c",
        "jcprepct.c",
        "jcsample.c",
        "jctrans.c",
        "jdapimin.c",
        "jdapistd.c",
        "jdarith.c",
        "jdatadst.c",
        "jdatasrc.c",
        "jdcoefct.c",
        "jdcoefct.h",
        "jdcolor.c",
        "jdct.h",
        "jddctmgr.c",
        "jdhuff.c",
        "jdhuff.h",
        "jdicc.c",
        "jdinput.c",
        "jdmainct.c",
        "jdmainct.h",
        "jdmarker.c",
        "jdmaster.c",
        "jdmaster.h",
        "jdmerge.c",
        "jdmerge.h",
        "jdphuff.c",
        "jdpostct.c",
        "jdsample.c",
        "jdsample.h",
        "jdtrans.c",
        "jerror.c",
        "jfdctflt.c",
        "jfdctfst.c",
        "jfdctint.c",
        "jidctflt.c",
        "jidctfst.c",
        "jidctint.c",
        "jidctred.c",
        "jmemmgr.c",
        "jmemnobs.c",
        "jmemsys.h",
        "jmorecfg.h",
        "jpeg_nbits_table.c",
        "jpeg_nbits_table.h",
        "jpegcomp.h",
        "jpegint.h",
        "jquant1.c",
        "jquant2.c",
        "jutils.c",
        "jversion.h",
    ],
    hdrs = [
        "jccolext.c",
        "jdcol565.c",
        "jdcolext.c",
        "jdmrg565.c",
        "jdmrgext.c",
        "jerror.h",
        "jinclude.h",
        "jpeglib.h",
        "jstdhuff.c",
    ],
    copts = libjpegturbo_copts,
    includes = ["."],
    deps = [
        ":simd",
    ],
)

cc_library(
    name = "jpegtranlib",
    srcs = ["transupp.c"],
    hdrs = ["transupp.h"],
    copts = libjpegturbo_copts,
    deps = [":jpeg"],
)

cc_library(
    name = "turbojpeg",
    srcs = [
        "cderror.h",
        "cdjpeg.h",
        "cmyk.h",
        "jconfigint.h",
        "jdatadst-tj.c",
        "jdatasrc-tj.c",
        "rdbmp.c",
        "rdppm.c",
        "tjutil.h",
        "turbojpeg.c",
        "wrbmp.c",
        "wrppm.c",
    ],
    hdrs = ["turbojpeg.h"],
    copts = libjpegturbo_copts + [
        "-DBMP_SUPPORTED",
        "-DPPM_SUPPORTED",
    ],
    deps = [
        ":jpeg",
        ":jpegtranlib",
    ],
)

cc_library(
    name = "rdjpgcom",
    srcs = [
        "rdjpgcom.c",
    ],
    copts = libjpegturbo_copts,
    deps = [
        ":jpeg",
    ],
)

cc_library(
    name = "wrjpgcom",
    srcs = [
        "wrjpgcom.c",
    ],
    copts = libjpegturbo_copts,
    deps = [
        ":jpeg",
    ],
)

filegroup(
    name = "headers",
    srcs = glob(["*.h"]),
)

# Library with core Libjpeg headers for clients to be able to build against
# them. This is helpful for clients that use the libjpeg shared/dynamic
# library at runtime but need the headers for compilation.
cc_library(
    name = "libjpeg_headers",
    hdrs = [
        "jconfig.h",
        "jmorecfg.h",
        "jpeglib.h",
    ],
)

# --------------------------------------------------------------------------
# SIMD support.

SRCS_SIMD_COMMON = [
    "jchuff.h",
    "jconfig.h",
    "jconfigint.h",
    "jdct.h",
    "jerror.h",
    "jinclude.h",
    "jmorecfg.h",
    "jpegint.h",
    "jpeglib.h",
    "jsimd.h",
    "jsimddct.h",
    "simd/jsimd.h",
]

# --------------------------------------------------------------------------
# ARM SIMD support.

# The .c files in the following list are "#include"-ed in the actual .c files.
# So, treat them like normal headers, and they *should not* be compiled into
# individual objects.
HDRS_SIMD_ARM = [
    "simd/arm/align.h",
    "simd/arm/jchuff.h",
    "simd/arm/jcgryext-neon.c",
    "simd/arm/jdcolext-neon.c",
    "simd/arm/jdmrgext-neon.c",
]

SRCS_SIMD_ARM = [
    "simd/arm/jccolor-neon.c",
    "simd/arm/jcgray-neon.c",
    "simd/arm/jcphuff-neon.c",
    "simd/arm/jcsample-neon.c",
    "simd/arm/jdcolor-neon.c",
    "simd/arm/jdmerge-neon.c",
    "simd/arm/jdsample-neon.c",
    "simd/arm/jfdctfst-neon.c",
    "simd/arm/jfdctint-neon.c",
    "simd/arm/jidctfst-neon.c",
    "simd/arm/jidctint-neon.c",
    "simd/arm/jidctred-neon.c",
    "simd/arm/jquanti-neon.c",
    "simd/arm/neon-compat.h",
]

cc_library(
    name = "libjpegturbo_simd_armv7a",
    srcs = [
        "simd/arm/aarch32/jsimd.c",
    ] + select({
        ":aarch32": [
            "simd/arm/aarch32/jchuff-neon.c",
        ] + SRCS_SIMD_ARM,
        "//conditions:default": [],
    }) + SRCS_SIMD_COMMON,
    hdrs = select({
        ":aarch32": [
            "simd/arm/aarch32/jccolext-neon.c",
        ] + HDRS_SIMD_ARM,
        "//conditions:default": [],
    }),
    copts = libjpegturbo_copts,
    includes = [
        ".",
        "./simd/arm",
    ],
)

cc_library(
    name = "libjpegturbo_simd_armv8a",
    srcs = [
        "simd/arm/aarch64/jsimd.c",
    ] + select({
        ":aarch64": [
            "simd/arm/aarch64/jchuff-neon.c",
        ] + SRCS_SIMD_ARM,
        "//conditions:default": [],
    }) + SRCS_SIMD_COMMON,
    hdrs = select({
        ":aarch64": [
            "simd/arm/aarch64/jccolext-neon.c",
        ] + HDRS_SIMD_ARM,
        "//conditions:default": [],
    }),
    copts = libjpegturbo_copts,
    includes = [
        ".",
        "./simd/arm",
    ],
    deps = [
        "@com_google_absl//absl/base:core_headers",
    ],
)

# --------------------------------------------------------------------------
# x86 SIMD support.

# asm library for 64-bit x86 (cpu k8, Android x86_64).
asm_library(
    name = "libjpegturbo_simd_x86_64",
    asm_srcs = [
        "simd/x86_64/jccolor-avx2.asm",
        "simd/x86_64/jccolor-sse2.asm",
        "simd/x86_64/jcgray-avx2.asm",
        "simd/x86_64/jcgray-sse2.asm",
        "simd/x86_64/jchuff-sse2.asm",
        "simd/x86_64/jcphuff-sse2.asm",
        "simd/x86_64/jcsample-avx2.asm",
        "simd/x86_64/jcsample-sse2.asm",
        "simd/x86_64/jdcolor-avx2.asm",
        "simd/x86_64/jdcolor-sse2.asm",
        "simd/x86_64/jdmerge-avx2.asm",
        "simd/x86_64/jdmerge-sse2.asm",
        "simd/x86_64/jdsample-avx2.asm",
        "simd/x86_64/jdsample-sse2.asm",
        "simd/x86_64/jfdctflt-sse.asm",
        "simd/x86_64/jfdctfst-sse2.asm",
        "simd/x86_64/jfdctint-avx2.asm",
        "simd/x86_64/jfdctint-sse2.asm",
        "simd/x86_64/jidctflt-sse2.asm",
        "simd/x86_64/jidctfst-sse2.asm",
        "simd/x86_64/jidctint-avx2.asm",
        "simd/x86_64/jidctint-sse2.asm",
        "simd/x86_64/jidctred-sse2.asm",
        "simd/x86_64/jquantf-sse2.asm",
        "simd/x86_64/jquanti-avx2.asm",
        "simd/x86_64/jquanti-sse2.asm",
        "simd/x86_64/jsimdcpu.asm",
    ],
    cc_srcs = SRCS_SIMD_COMMON,
    copts = libjpegturbo_copts,
    x86_target_bits = "64",
)

# asm library for 32-bit x86 (Android x86).
asm_library(
    name = "libjpegturbo_simd_x86",
    asm_srcs = [
        "simd/i386/jccolor-avx2.asm",
        "simd/i386/jccolor-mmx.asm",
        "simd/i386/jccolor-sse2.asm",
        "simd/i386/jcgray-avx2.asm",
        "simd/i386/jcgray-mmx.asm",
        "simd/i386/jcgray-sse2.asm",
        "simd/i386/jchuff-sse2.asm",
        "simd/i386/jcphuff-sse2.asm",
        "simd/i386/jcsample-avx2.asm",
        "simd/i386/jcsample-mmx.asm",
        "simd/i386/jcsample-sse2.asm",
        "simd/i386/jdcolor-avx2.asm",
        "simd/i386/jdcolor-mmx.asm",
        "simd/i386/jdcolor-sse2.asm",
        "simd/i386/jdmerge-avx2.asm",
        "simd/i386/jdmerge-mmx.asm",
        "simd/i386/jdmerge-sse2.asm",
        "simd/i386/jdsample-avx2.asm",
        "simd/i386/jdsample-mmx.asm",
        "simd/i386/jdsample-sse2.asm",
        "simd/i386/jfdctflt-3dn.asm",
        "simd/i386/jfdctflt-sse.asm",
        "simd/i386/jfdctfst-mmx.asm",
        "simd/i386/jfdctfst-sse2.asm",
        "simd/i386/jfdctint-avx2.asm",
        "simd/i386/jfdctint-mmx.asm",
        "simd/i386/jfdctint-sse2.asm",
        "simd/i386/jidctflt-3dn.asm",
        "simd/i386/jidctflt-sse.asm",
        "simd/i386/jidctflt-sse2.asm",
        "simd/i386/jidctfst-mmx.asm",
        "simd/i386/jidctfst-sse2.asm",
        "simd/i386/jidctint-avx2.asm",
        "simd/i386/jidctint-mmx.asm",
        "simd/i386/jidctint-sse2.asm",
        "simd/i386/jidctred-mmx.asm",
        "simd/i386/jidctred-sse2.asm",
        "simd/i386/jquant-3dn.asm",
        "simd/i386/jquant-mmx.asm",
        "simd/i386/jquant-sse.asm",
        "simd/i386/jquantf-sse2.asm",
        "simd/i386/jquanti-avx2.asm",
        "simd/i386/jquanti-sse2.asm",
        "simd/i386/jsimdcpu.asm",
    ],
    cc_srcs = SRCS_SIMD_COMMON,
    copts = libjpegturbo_copts,
    x86_target_bits = "32",
)

# --------------------------------------------------------------------------
# Stubs for targets without SIMD support.

cc_library(
    name = "libjpegturbo_simd_none",
    srcs = [
        "jchuff.h",
        "jconfig.h",
        "jconfigint.h",
        "jdct.h",
        "jerror.h",
        "jinclude.h",
        "jmorecfg.h",
        "jpegint.h",
        "jpeglib.h",
        "jsimd.h",
        "jsimd_none.c",
        "jsimddct.h",
    ],
    copts = libjpegturbo_copts,
)

# --------------------------------------------------------------------------
# Configure SIMD support based on the target platform, but skip
# SIMD if running memory sanitizer.

cc_library(
    name = "simd",
    hdrs = [
        "jsimd.h",
        "jsimddct.h",
    ],
    copts = libjpegturbo_copts,
    linkstatic = 1,
    deps = [":simd_with_asm"],
)

alias(
    name = "simd_with_asm",
    actual = select({
        ":aarch32": ":libjpegturbo_simd_armv7a",
        ":aarch64": ":libjpegturbo_simd_armv8a",
        ":x86_32": ":libjpegturbo_simd_x86",
        ":x86_64": ":libjpegturbo_simd_x86_64",

        # Deps on this library should have already diverted to
        # libjpegturbo_simd_none, but this default is still needed, otherwise
        # `blaze build //third_party/libjpeg_turbo/src:all` (or similar) will
        # fail due to an unsatisfiable select().
        "//conditions:default": ":libjpegturbo_simd_none",
    }),
)

# --------------------------------------------------------------------------
# Binaries
#
#  We first create a 'binlib' for each binary that can be linked
#  against from parent directory to create a version-independent
#  binary entry.
#  The local binaries in this directory then simply refer to these lib.

# jpegtran
cc_library(
    name = "jpegtran_binlib",
    srcs = [
        "cderror.h",
        "cdjpeg.c",
        "cdjpeg.h",
        "jconfigint.h",
        "jpegtran.c",
        "jversion.h",
        "rdswitch.c",
    ],
    copts = libjpegturbo_copts + [
        "-DBMP_SUPPORTED",
        "-DGIF_SUPPORTED",
        "-DPPM_SUPPORTED",
        "-DTARGA_SUPPORTED",
    ],
    deps = [
        ":jpeg",
        ":jpegtranlib",
    ],
)

cc_binary(
    name = "jpegtran",
    linkopts = libjpegturbo_linkopts,
    visibility = [
        # Allow all third party packages.
        "//third_party:__subpackages__",
    ],
    deps = [":jpegtran_binlib"],
)

# cjpeg
cc_library(
    name = "cjpeg_binlib",
    srcs = [
        "cderror.h",
        "cdjpeg.c",
        "cdjpeg.h",
        "cjpeg.c",
        "cmyk.h",
        "jconfigint.h",
        "rdbmp.c",
        "rdgif.c",
        "rdppm.c",
        "rdswitch.c",
        "rdtarga.c",
    ],
    copts = libjpegturbo_copts + [
        "-DBMP_SUPPORTED",
        "-DGIF_SUPPORTED",
        "-DPPM_SUPPORTED",
        "-DTARGA_SUPPORTED",
    ],
    deps = [
        ":jpeg",
    ],
)

cc_binary(
    name = "cjpeg",
    linkopts = libjpegturbo_linkopts,
    deps = [":cjpeg_binlib"],
)

# djpeg
cc_library(
    name = "djpeg_binlib",
    srcs = [
        "cderror.h",
        "cdjpeg.c",
        "cdjpeg.h",
        "cmyk.h",
        "djpeg.c",
        "jconfigint.h",
        "rdcolmap.c",
        "rdswitch.c",
        "wrbmp.c",
        "wrgif.c",
        "wrppm.c",
        "wrtarga.c",
    ],
    copts = libjpegturbo_copts + [
        "-DBMP_SUPPORTED",
        "-DGIF_SUPPORTED",
        "-DPPM_SUPPORTED",
        "-DTARGA_SUPPORTED",
    ],
    deps = [
        ":jpeg",
    ],
)

cc_binary(
    name = "djpeg",
    linkopts = libjpegturbo_linkopts,
    deps = [":djpeg_binlib"],
)

# --------------------------------------------------------------------------
# Original tests, which use the TurboJPEG API.

cc_binary(
    name = "tjbench",
    srcs = [
        "cderror.h",
        "cdjpeg.h",
        "cmyk.h",
        "jconfigint.h",
        "rdbmp.c",
        "rdppm.c",
        "tjbench.c",
        "tjutil.c",
        "tjutil.h",
        "wrbmp.c",
        "wrppm.c",
    ],
    copts = libjpegturbo_copts,
    linkopts = libjpegturbo_linkopts,
    deps = [
        ":jpeg",
        ":turbojpeg",
    ],
)

cc_library(
    name = "md5",
    srcs = [
        "md5/md5.c",
        "md5/md5hl.c",
        "tjutil.c",
        "tjutil.h",
    ],
    hdrs = ["md5/md5.h"],
)

cc_test(
    name = "tjunittest",
    srcs = [
        "cmyk.h",
        "tjunittest.c",
        "tjutil.c",
        "tjutil.h",
    ],
    copts = libjpegturbo_copts,
    linkopts = libjpegturbo_linkopts,
    deps = [
        ":jpeg",
        ":md5",
        ":turbojpeg",
    ],
)

# general-purpose test files
filegroup(
    name = "jpeg_testdata",
    srcs = glob([
        "testimages/*",
    ]),
)
